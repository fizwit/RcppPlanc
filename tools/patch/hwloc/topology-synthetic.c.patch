Index: hwloc/topology-synthetic.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hwloc/topology-synthetic.c b/hwloc/topology-synthetic.c
--- a/hwloc/topology-synthetic.c        (revision f262ce42ff5a007a8f247b546a6fc322b2922d1e)
+++ b/hwloc/topology-synthetic.c        (date 1699070814857)
@@ -13,7 +13,7 @@
 #include "private/debug.h"

 #include <limits.h>
-#include <assert.h>
+//#include <assert.h>
 #ifdef HAVE_STRINGS_H
 #include <strings.h>
 #endif
@@ -256,14 +256,14 @@

        loops[cur_loop].step = step;
        loops[cur_loop].nb = nb;
-       assert(nb);
-       assert(step);
+       //assert(nb);
+       //assert(step);
        if (step < minstep)
          minstep = step;
        nbs *= nb;
       }
     }
-    assert(nbs);
+    //assert(nbs);

     if (nbs != total) {
       /* one loop of total/nbs steps is missing, add it if it's just the smallest one */
@@ -888,10 +888,10 @@
     break;
   case HWLOC_OBJ_PU:
     break;
   default:
     /* Should never happen */
-    assert(0);
+  //  assert(0);
     break;
   }
 }

@@ -921,7 +921,7 @@
   if (!attached)
     return;

-  assert(attached->attr.type == HWLOC_OBJ_NUMANODE);
+  //assert(attached->attr.type == HWLOC_OBJ_NUMANODE);

   attached_os_index = hwloc_synthetic_next_index(&data->numa_attached_indexes, HWLOC_OBJ_NUMANODE);

@@ -959,8 +959,8 @@
   hwloc_bitmap_t set;
   unsigned os_index;

-  assert(hwloc__obj_type_is_normal(type) || type == HWLOC_OBJ_NUMANODE);
-  assert(type != HWLOC_OBJ_MACHINE);
+  //assert(hwloc__obj_type_is_normal(type) || type == HWLOC_OBJ_NUMANODE);
+  //assert(type != HWLOC_OBJ_MACHINE);

   os_index = hwloc_synthetic_next_index(&curlevel->indexes, type);

@@ -1005,9 +1005,9 @@
   hwloc_bitmap_t cpuset = hwloc_bitmap_alloc();
   unsigned i;

-  assert(dstatus->phase == HWLOC_DISC_PHASE_GLOBAL);
+  //assert(dstatus->phase == HWLOC_DISC_PHASE_GLOBAL);

-  assert(!topology->levels[0][0]->cpuset);
+  //assert(!topology->levels[0][0]->cpuset);

   hwloc_alloc_root_sets(topology->levels[0][0]);

@@ -1270,7 +1270,7 @@
       hwloc_obj_t *level;

       if (obj->depth < 0) {
-       assert(obj->depth == HWLOC_TYPE_DEPTH_NUMANODE);
+       //assert(obj->depth == HWLOC_TYPE_DEPTH_NUMANODE);
        total = topology->slevels[HWLOC_SLEVEL_NUMANODE].nbobjs;
        level = topology->slevels[HWLOC_SLEVEL_NUMANODE].objs;
       } else {
@@ -1401,7 +1401,7 @@
       }
       numanode = numanode->memory_first_child;
     }
-    assert(numanode); /* there's always a numanode at the bottom of the memory tree */
+    //assert(numanode); /* there's always a numanode at the bottom of the memory tree */

     if (needprefix)
       hwloc__export_synthetic_add_char(&ret, &tmp, &tmplen, ' ');
@@ -1439,7 +1439,7 @@

     idx = hwloc_bitmap_first(remaining_nodes);
     node = hwloc_get_numanode_obj_by_os_index(topology, idx);
-    assert(node);
+    //assert(node);

     first_parent = node->parent;

@@ -1448,7 +1448,7 @@
       hwloc_obj_t parent, mchild;

       parent = hwloc_get_obj_by_depth(topology, first_parent->depth, i);
-      assert(parent);
+      //assert(parent);

       /* must have same memory arity */
       if (parent->memory_arity != first_parent->memory_arity)
@@ -1535,12 +1535,12 @@
     signed pdepth;

     node = hwloc_get_obj_by_type(topology, HWLOC_OBJ_NUMANODE, 0);
-    assert(node);
-    assert(hwloc__obj_type_is_normal(node->parent->type)); /* only depth-1 memory children for now */
+    //assert(node);
+    //assert(hwloc__obj_type_is_normal(node->parent->type)); /* only depth-1 memory children for now */
     pdepth = node->parent->depth;

     while ((node = node->next_cousin) != NULL) {
-      assert(hwloc__obj_type_is_normal(node->parent->type)); /* only depth-1 memory children for now */
+      //assert(hwloc__obj_type_is_normal(node->parent->type)); /* only depth-1 memory children for now */
       if (node->parent->depth != pdepth) {
        if (verbose)
          fprintf(stderr, "Cannot export to synthetic v1 if memory is attached to parents at different depths.\n");
