Index: hwloc/traversal.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hwloc/traversal.c b/hwloc/traversal.c
--- a/hwloc/traversal.c	(revision f262ce42ff5a007a8f247b546a6fc322b2922d1e)
+++ b/hwloc/traversal.c	(date 1699069836806)
@@ -55,7 +55,7 @@
   int depth = HWLOC_TYPE_DEPTH_UNKNOWN;
   /* memory leaves are always NUMA nodes for now, no need to check parents of other memory types */
   hwloc_obj_t numa = hwloc_get_obj_by_depth(topology, HWLOC_TYPE_DEPTH_NUMANODE, 0);
-  assert(numa);
+  //assert(numa);
   while (numa) {
     hwloc_obj_t parent = numa->parent;
     /* walk-up the memory hierarchy */
@@ -70,7 +70,7 @@
     numa = numa->next_cousin;
   }

-  assert(depth >= 0);
+  //assert(depth >= 0);
   return depth;
 }

@@ -537,7 +537,7 @@
   case HWLOC_OBJ_BRIDGE:
     /* if downstream_type can ever be non-PCI, we'll have to make strings more precise,
      * or relax the hwloc_type_sscanf test */
-    assert(obj->attr->bridge.downstream_type == HWLOC_OBJ_BRIDGE_PCI);
+    //assert(obj->attr->bridge.downstream_type == HWLOC_OBJ_BRIDGE_PCI);
     return hwloc_snprintf(string, size, obj->attr->bridge.upstream_type == HWLOC_OBJ_BRIDGE_PCI ? "PCIBridge" : "HostBridge");
   case HWLOC_OBJ_PCI_DEVICE:
     return hwloc_snprintf(string, size, "PCI");
@@ -659,7 +659,7 @@
         snprintf(down, sizeof(down), "buses=%04x:[%02x-%02x]",
                  obj->attr->bridge.downstream.pci.domain, obj->attr->bridge.downstream.pci.secondary_bus, obj->attr->bridge.downstream.pci.subordinate_bus);
       } else
-        assert(0);
+        //assert(0);
       if (*up)
 	res = hwloc_snprintf(string, size, "%s%s%s", up, separator, down);
       else
@@ -812,7 +812,7 @@

     } else {
       /* find a matching osdev child */
-      assert(type == HWLOC_OBJ_OS_DEVICE);
+      //assert(type == HWLOC_OBJ_OS_DEVICE);
       /* FIXME: won't work if we ever store osdevs in osdevs */
       hwloc_obj_t child;
       for(child = pci->io_first_child; child; child = child->next_sibling) {