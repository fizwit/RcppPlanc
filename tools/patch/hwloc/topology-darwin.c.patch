Subject: [PATCH] topology-darwin.c.patch
---
Index: hwloc/topology-darwin.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hwloc/topology-darwin.c b/hwloc/topology-darwin.c
--- a/hwloc/topology-darwin.c	(revision f262ce42ff5a007a8f247b546a6fc322b2922d1e)
+++ b/hwloc/topology-darwin.c	(date 1699468009800)
@@ -50,8 +50,8 @@
                            char cluster_type, const char *compatible)
 {
   if (kinds->nr == MAX_KINDS) {
-    if (HWLOC_SHOW_ALL_ERRORS())
-      fprintf(stderr, "hwloc/darwin: failed to add new cpukinds, already %u used\n", kinds->nr);
+    //if (HWLOC_SHOW_ALL_ERRORS())
+    //  fprintf(stderr, "hwloc/darwin: failed to add new cpukinds, already %u used\n", kinds->nr);
     return NULL;
   }
 
@@ -84,8 +84,8 @@
       if (compatible) {
         if (!kinds->kinds[i].compatible)
           kinds->kinds[i].compatible = strdup(compatible);
-        else if (strcmp(kinds->kinds[i].compatible, compatible))
-          fprintf(stderr, "hwloc/darwin/cpukinds: got a different compatible string inside same cluster type %c\n", cluster_type);
+        //else if (strcmp(kinds->kinds[i].compatible, compatible))
+        //  fprintf(stderr, "hwloc/darwin/cpukinds: got a different compatible string inside same cluster type %c\n", cluster_type);
       }
       kind = &kinds->kinds[i];
       goto found;
@@ -123,14 +123,14 @@
 
   cpus_root = IORegistryEntryFromPath(kIOMainPortDefault, DT_PLANE ":/cpus");
   if (!cpus_root) {
-    fprintf(stderr, "hwloc/darwin/cpukinds: failed to find " DT_PLANE ":/cpus\n");
+    //fprintf(stderr, "hwloc/darwin/cpukinds: failed to find " DT_PLANE ":/cpus\n");
     return -1;
   }
 
   kret = IORegistryEntryGetChildIterator(cpus_root, DT_PLANE, &cpus_iter);
   if (kret != KERN_SUCCESS) {
-    if (HWLOC_SHOW_ALL_ERRORS())
-      fprintf(stderr, "hwloc/darwin/cpukinds: failed to create iterator\n");
+    //if (HWLOC_SHOW_ALL_ERRORS())
+    //  fprintf(stderr, "hwloc/darwin/cpukinds: failed to create iterator\n");
     IOObjectRelease(cpus_root);
     return -1;
   }
@@ -162,17 +162,17 @@
       continue;
     }
     if (CFGetTypeID(ref) != CFNumberGetTypeID()) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `logical-cpu-id' CF type %s\n",
-                CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
+      // if (HWLOC_SHOW_ALL_ERRORS())
+        // fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `logical-cpu-id' CF type %s\n",
+        //        CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
       CFRelease(ref);
       continue;
     }
     {
       long long lld_value;
       if (!CFNumberGetValue(ref, kCFNumberLongLongType, &lld_value)) {
-        if (HWLOC_SHOW_ALL_ERRORS())
-          fprintf(stderr, "hwloc/darwin/cpukinds: failed to get logical-cpu-id\n");
+        // if (HWLOC_SHOW_ALL_ERRORS())
+        //  fprintf(stderr, "hwloc/darwin/cpukinds: failed to get logical-cpu-id\n");
         CFRelease(ref);
         continue;
       }
@@ -209,21 +209,21 @@
     /* get cluster-type */
     ref = IORegistryEntrySearchCFProperty(cpus_child, DT_PLANE, CFSTR("cluster-type"), kCFAllocatorDefault, kNilOptions);
     if (!ref) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: failed to find cluster-type\n");
+      // if (HWLOC_SHOW_ALL_ERRORS())
+      //  fprintf(stderr, "hwloc/darwin/cpukinds: failed to find cluster-type\n");
       continue;
     }
     if (CFGetTypeID(ref) != CFDataGetTypeID()) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `cluster-type' CF type %s\n",
-                CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
+      // if (HWLOC_SHOW_ALL_ERRORS())
+      //  fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `cluster-type' CF type %s\n",
+      //          CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
       CFRelease(ref);
       continue;
     }
     if (CFDataGetLength(ref) < 2) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: only got %ld bytes from cluster-type data\n",
-                CFDataGetLength(ref));
+      // if (HWLOC_SHOW_ALL_ERRORS())
+        // fprintf(stderr, "hwloc/darwin/cpukinds: only got %ld bytes from cluster-type data\n",
+        //        CFDataGetLength(ref));
       CFRelease(ref);
       continue;
     }
@@ -234,9 +234,9 @@
         hwloc_debug("got cluster-type %c\n", u8_values[0]);
         cluster_type = u8_values[0];
       } else {
-        if (HWLOC_SHOW_ALL_ERRORS())
-          fprintf(stderr, "hwloc/darwin/cpukinds: got more than one character in cluster-type data %c%c...\n",
-                  u8_values[0], u8_values[1]);
+        //if (HWLOC_SHOW_ALL_ERRORS())
+        //  fprintf(stderr, "hwloc/darwin/cpukinds: got more than one character in cluster-type data %c%c...\n",
+        //          u8_values[0], u8_values[1]);
         CFRelease(ref);
         continue;
       }
@@ -246,14 +246,14 @@
     /* get compatible */
     ref = IORegistryEntrySearchCFProperty(cpus_child, DT_PLANE, CFSTR("compatible"), kCFAllocatorDefault, kNilOptions);
     if (!ref) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: failed to find compatible\n");
+      //if (HWLOC_SHOW_ALL_ERRORS())
+      //  fprintf(stderr, "hwloc/darwin/cpukinds: failed to find compatible\n");
       continue;
     }
     if (CFGetTypeID(ref) != CFDataGetTypeID()) {
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `compatible' CF type %s\n",
-                CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
+      // if (HWLOC_SHOW_ALL_ERRORS())
+      //  fprintf(stderr, "hwloc/darwin/cpukinds: unexpected `compatible' CF type %s\n",
+      //          CFStringGetCStringPtr(CFCopyTypeIDDescription(CFGetTypeID(ref)), kCFStringEncodingUTF8));
       CFRelease(ref);
       continue;
     }
@@ -269,8 +269,8 @@
         if (!compatible[i] && compatible[i+1])
           compatible[i] = ';';
       if (!compatible[0]) {
-        if (HWLOC_SHOW_ALL_ERRORS())
-          fprintf(stderr, "hwloc/darwin/cpukinds: compatible is empty\n");
+        // if (HWLOC_SHOW_ALL_ERRORS())
+        //  fprintf(stderr, "hwloc/darwin/cpukinds: compatible is empty\n");
         CFRelease(ref);
         continue;
       }
@@ -301,9 +301,9 @@
       kinds->kinds[i].perflevel = 0;
     } else {
       *matched_perflevels = 0;
-      if (HWLOC_SHOW_ALL_ERRORS())
-        fprintf(stderr, "hwloc/darwin/cpukinds: unrecognized cluster type %c compatible %s, cannot match perflevels\n",
-                kinds->kinds[i].cluster_type, kinds->kinds[i].compatible);
+      // if (HWLOC_SHOW_ALL_ERRORS())
+      //  fprintf(stderr, "hwloc/darwin/cpukinds: unrecognized cluster type %c compatible %s, cannot match perflevels\n",
+      //          kinds->kinds[i].cluster_type, kinds->kinds[i].compatible);
     }
   }
 
@@ -494,9 +494,9 @@
        */
       size_t s;
       snprintf(name, sizeof(name), "hw.perflevel%u.l2perflevels", level);
-      if (!sysctlbyname(name, NULL, &s, NULL, 0))
-        if (HWLOC_SHOW_ALL_ERRORS())
-          fprintf(stderr, "hwloc/darwin: key %s succeeded size %lu, please report to hwloc developers.\n", name, (unsigned long) s);
+      // if (!sysctlbyname(name, NULL, &s, NULL, 0))
+      //  if (HWLOC_SHOW_ALL_ERRORS())
+      //    fprintf(stderr, "hwloc/darwin: key %s succeeded size %lu, please report to hwloc developers.\n", name, (unsigned long) s);
     }
 
     /* assume PUs are contigous for now. */
@@ -525,9 +525,9 @@
        */
       size_t s;
       snprintf(name, sizeof(name), "hw.perflevel%u.l3perflevels", level);
-      if (!sysctlbyname(name, NULL, &s, NULL, 0))
-        if (HWLOC_SHOW_ALL_ERRORS())
-          fprintf(stderr, "hwloc/darwin: key %s succeeded size %lu, please report to hwloc developers.\n", name, (unsigned long) s);
+      // if (!sysctlbyname(name, NULL, &s, NULL, 0))
+      //  if (HWLOC_SHOW_ALL_ERRORS())
+      //    fprintf(stderr, "hwloc/darwin: key %s succeeded size %lu, please report to hwloc developers.\n", name, (unsigned long) s);
     }
 
     hwloc__darwin_build_perflevel_cache_level(topology, cpuset, cpus, HWLOC_OBJ_L3CACHE, 3, size, linesize);