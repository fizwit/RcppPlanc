Subject: [PATCH] topology-x86.c
---
Index: hwloc/topology-x86.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hwloc/topology-x86.c b/hwloc/topology-x86.c
--- a/hwloc/topology-x86.c	(revision f262ce42ff5a007a8f247b546a6fc322b2922d1e)
+++ b/hwloc/topology-x86.c	(date 1699470865834)
@@ -80,7 +80,7 @@
 
   cpuiddump = malloc(sizeof(*cpuiddump));
   if (!cpuiddump) {
-    fprintf(stderr, "hwloc/x86: Failed to allocate cpuiddump for PU #%u, ignoring cpuiddump.\n", idx);
+  //  fprintf(stderr, "hwloc/x86: Failed to allocate cpuiddump for PU #%u, ignoring cpuiddump.\n", idx);
     goto out;
   }
 
@@ -91,7 +91,7 @@
   snprintf(filename, filenamelen, "%s/pu%u", dirpath, idx);
   file = fopen(filename, "r");
   if (!file) {
-    fprintf(stderr, "hwloc/x86: Could not read dumped cpuid file %s, ignoring cpuiddump.\n", filename);
+  //  fprintf(stderr, "hwloc/x86: Could not read dumped cpuid file %s, ignoring cpuiddump.\n", filename);
     goto out_with_filename;
   }
 
@@ -100,7 +100,7 @@
     nr++;
   cpuiddump->entries = malloc(nr * sizeof(struct cpuiddump_entry));
   if (!cpuiddump->entries) {
-    fprintf(stderr, "hwloc/x86: Failed to allocate %u cpuiddump entries for PU #%u, ignoring cpuiddump.\n", nr, idx);
+    // fprintf(stderr, "hwloc/x86: Failed to allocate %u cpuiddump entries for PU #%u, ignoring cpuiddump.\n", nr, idx);
     goto out_with_file;
   }
 
@@ -156,8 +156,8 @@
     return;
   }
 
-  fprintf(stderr, "hwloc/x86: Couldn't find %x,%x,%x,%x in dumped cpuid, returning 0s.\n",
-	  *eax, *ebx, *ecx, *edx);
+  // fprintf(stderr, "hwloc/x86: Couldn't find %x,%x,%x,%x in dumped cpuid, returning 0s.\n",
+  //	  *eax, *ebx, *ecx, *edx);
   *eax = 0;
   *ebx = 0;
   *ecx = 0;
@@ -1647,8 +1647,8 @@

 #if HAVE_DECL_RUNNING_ON_VALGRIND
   if (RUNNING_ON_VALGRIND && !data->src_cpuiddump_path) {
-    fprintf(stderr, "hwloc x86 backend cannot work under Valgrind, disabling.\n"
-	    "May be reenabled by dumping CPUIDs with hwloc-gather-cpuid\n"
-	    "and reloading them under Valgrind with HWLOC_CPUID_PATH.\n");
+  //  fprintf(stderr, "hwloc x86 backend cannot work under Valgrind, disabling.\n"
+	//    "May be reenabled by dumping CPUIDs with hwloc-gather-cpuid\n"
+	//    "and reloading them under Valgrind with HWLOC_CPUID_PATH.\n");
     return 0;
   }
@@ -1728,20 +1728,20 @@
   path = malloc(strlen(src_cpuiddump_path) + strlen("/hwloc-cpuid-info") + 1);
   if (!path)
     goto out_with_dir;
-  sprintf(path, "%s/hwloc-cpuid-info", src_cpuiddump_path);
+  snprintf(path, 20, "%s/hwloc-cpuid-info", src_cpuiddump_path);
   file = fopen(path, "r");
   if (!file) {
-    fprintf(stderr, "hwloc/x86: Couldn't open dumped cpuid summary %s\n", path);
+    // fprintf(stderr, "hwloc/x86: Couldn't open dumped cpuid summary %s\n", path);
     goto out_with_path;
   }
   if (!fgets(line, sizeof(line), file)) {
-    fprintf(stderr, "hwloc/x86: Found read dumped cpuid summary in %s\n", path);
+    // fprintf(stderr, "hwloc/x86: Found read dumped cpuid summary in %s\n", path);
     fclose(file);
     goto out_with_path;
   }
   fclose(file);
   if (strcmp(line, "Architecture: x86\n")) {
-    fprintf(stderr, "hwloc/x86: Found non-x86 dumped cpuid summary in %s: %s\n", path, line);
+    // fprintf(stderr, "hwloc/x86: Found non-x86 dumped cpuid summary in %s: %s\n", path, line);
     goto out_with_path;
   }
   free(path);
@@ -1752,21 +1752,21 @@
       unsigned long idx = strtoul(dirent->d_name+2, &end, 10);
       if (!*end)
 	hwloc_bitmap_set(set, idx);
-      else
-	fprintf(stderr, "hwloc/x86: Ignoring invalid dirent `%s' in dumped cpuid directory `%s'\n",
-		dirent->d_name, src_cpuiddump_path);
+    //  else
+	// fprintf(stderr, "hwloc/x86: Ignoring invalid dirent `%s' in dumped cpuid directory `%s'\n",
+	//	dirent->d_name, src_cpuiddump_path);
     }
   }
   closedir(dir);

   if (hwloc_bitmap_iszero(set)) {
-    fprintf(stderr, "hwloc/x86: Did not find any valid pu%%u entry in dumped cpuid directory `%s'\n",
-	    src_cpuiddump_path);
+    // fprintf(stderr, "hwloc/x86: Did not find any valid pu%%u entry in dumped cpuid directory `%s'\n",
+	//    src_cpuiddump_path);
     return -1;
   } else if (hwloc_bitmap_last(set) != hwloc_bitmap_weight(set) - 1) {
     /* The x86 backends enforces contigous set of PUs starting at 0 so far */
-    fprintf(stderr, "hwloc/x86: Found non-contigous pu%%u range in dumped cpuid directory `%s'\n",
-	    src_cpuiddump_path);
+    // fprintf(stderr, "hwloc/x86: Found non-contigous pu%%u range in dumped cpuid directory `%s'\n",
+	//    src_cpuiddump_path);
     return -1;
   }

@@ -1831,6 +1831,6 @@
       data->nbprocs = hwloc_bitmap_weight(set);
-    } else {
-      fprintf(stderr, "hwloc/x86: Ignoring dumped cpuid directory.\n");
+    // } else {
+    //  fprintf(stderr, "hwloc/x86: Ignoring dumped cpuid directory.\n");
     }
     hwloc_bitmap_free(set);
   }
