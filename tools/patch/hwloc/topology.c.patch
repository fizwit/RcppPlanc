Subject: [PATCH] topology.c.patch
---
Index: hwloc/topology.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hwloc/topology.c b/hwloc/topology.c
--- a/hwloc/topology.c	(revision f262ce42ff5a007a8f247b546a6fc322b2922d1e)
+++ b/hwloc/topology.c	(date 1699470546696)
@@ -175,7 +175,7 @@
     report_insert_error_format_obj(newstr, sizeof(newstr), new);
     report_insert_error_format_obj(oldstr, sizeof(oldstr), old);
 
-    fprintf(stderr, "****************************************************************************\n");
+    /*fprintf(stderr, "****************************************************************************\n");
     fprintf(stderr, "* hwloc %s received invalid information from the operating system.\n", HWLOC_VERSION);
     fprintf(stderr, "*\n");
     fprintf(stderr, "* Failed with: %s\n", msg);
@@ -184,15 +184,15 @@
     fprintf(stderr, "*\n");
     fprintf(stderr, "* The following FAQ entry in the hwloc documentation may help:\n");
     fprintf(stderr, "*   What should I do when hwloc reports \"operating system\" warnings?\n");
-    fprintf(stderr, "* Otherwise please report this error message to the hwloc user's mailing list,\n");
-#ifdef HWLOC_LINUX_SYS
-    fprintf(stderr, "* along with the files generated by the hwloc-gather-topology script.\n");
-#else
-    fprintf(stderr, "* along with any relevant topology information from your platform.\n");
-#endif
-    fprintf(stderr, "* \n");
+    fprintf(stderr, "* Otherwise please report this error message to the hwloc user's mailing list,\n");*/
+//#ifdef HWLOC_LINUX_SYS
+//    fprintf(stderr, "* along with the files generated by the hwloc-gather-topology script.\n");
+//#else
+//    fprintf(stderr, "* along with any relevant topology information from your platform.\n");
+//#endif
+/*    fprintf(stderr, "* \n");
     fprintf(stderr, "* hwloc will now ignore this invalid topology information and continue.\n");
-    fprintf(stderr, "****************************************************************************\n");
+    fprintf(stderr, "****************************************************************************\n");*/
     reported = 1;
   }
 }
@@ -3199,8 +3199,8 @@
       tmpnbobjs = realloc(topology->level_nbobjects,
 			  2 * topology->nb_levels_allocated * sizeof(*topology->level_nbobjects));
       if (!tmplevels || !tmpnbobjs) {
-        if (HWLOC_SHOW_CRITICAL_ERRORS())
-          fprintf(stderr, "hwloc: failed to realloc level arrays to %u\n", topology->nb_levels_allocated * 2);
+        //if (HWLOC_SHOW_CRITICAL_ERRORS())
+        //  fprintf(stderr, "hwloc: failed to realloc level arrays to %u\n", topology->nb_levels_allocated * 2);
 
 	/* if one realloc succeeded, make sure the caller will free the new buffer */
 	if (tmplevels)
@@ -3590,18 +3590,18 @@
   hwloc_debug("%s", "\nRemoving empty objects\n");
   remove_empty(topology, &topology->levels[0][0]);
   if (!topology->levels[0][0]) {
-    if (HWLOC_SHOW_CRITICAL_ERRORS())
-      fprintf(stderr, "hwloc: Topology became empty, aborting!\n");
+    //if (HWLOC_SHOW_CRITICAL_ERRORS())
+    //  fprintf(stderr, "hwloc: Topology became empty, aborting!\n");
     return -1;
   }
   if (hwloc_bitmap_iszero(topology->levels[0][0]->cpuset)) {
-    if (HWLOC_SHOW_CRITICAL_ERRORS())
-      fprintf(stderr, "hwloc: Topology does not contain any PU, aborting!\n");
+    // if (HWLOC_SHOW_CRITICAL_ERRORS())
+    //  fprintf(stderr, "hwloc: Topology does not contain any PU, aborting!\n");
     return -1;
   }
   if (hwloc_bitmap_iszero(topology->levels[0][0]->nodeset)) {
-    if (HWLOC_SHOW_CRITICAL_ERRORS())
-      fprintf(stderr, "hwloc: Topology does not contain any NUMA node, aborting!\n");
+    // if (HWLOC_SHOW_CRITICAL_ERRORS())
+    //  fprintf(stderr, "hwloc: Topology does not contain any NUMA node, aborting!\n");
     return -1;
   }
   hwloc_debug_print_objects(0, topology->levels[0][0]);