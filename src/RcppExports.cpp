// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RcppPlanc.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rcpp_mat_to_h5mat
CharacterVector rcpp_mat_to_h5mat(const NumericMatrix& x, const std::string& filename, const std::string& dataPath);
RcppExport SEXP _RcppPlanc_rcpp_mat_to_h5mat(SEXP xSEXP, SEXP filenameSEXP, SEXP dataPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dataPath(dataPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mat_to_h5mat(x, filename, dataPath));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spmat_to_h5mat
CharacterVector rcpp_spmat_to_h5mat(const NumericVector& data, const IntegerVector& rowind, const IntegerVector& colptr, unsigned int nrow, unsigned int ncol, const std::string& filename, const std::string& dataPath);
RcppExport SEXP _RcppPlanc_rcpp_spmat_to_h5mat(SEXP dataSEXP, SEXP rowindSEXP, SEXP colptrSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP filenameSEXP, SEXP dataPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colptr(colptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dataPath(dataPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spmat_to_h5mat(data, rowind, colptr, nrow, ncol, filename, dataPath));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_spmat_to_h5spmat
CharacterVector rcpp_spmat_to_h5spmat(const NumericVector& value, const IntegerVector& rowind, const IntegerVector& colptr, unsigned int nrow, unsigned int ncol, const std::string& filename, const std::string& valuePath, const std::string& rowindPath, const std::string& colptrPath);
RcppExport SEXP _RcppPlanc_rcpp_spmat_to_h5spmat(SEXP valueSEXP, SEXP rowindSEXP, SEXP colptrSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP filenameSEXP, SEXP valuePathSEXP, SEXP rowindPathSEXP, SEXP colptrPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type value(valueSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowind(rowindSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colptr(colptrSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type valuePath(valuePathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type rowindPath(rowindPathSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type colptrPath(colptrPathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_spmat_to_h5spmat(value, rowind, colptr, nrow, ncol, filename, valuePath, rowindPath, colptrPath));
    return rcpp_result_gen;
END_RCPP
}
// nmf
Rcpp::List nmf(const SEXP& x, const arma::uword& k, const arma::uword& niter, const std::string& algo, const Rcpp::Nullable<Rcpp::NumericMatrix>& Winit, const Rcpp::Nullable<Rcpp::NumericMatrix>& Hinit);
RcppExport SEXP _RcppPlanc_nmf(SEXP xSEXP, SEXP kSEXP, SEXP niterSEXP, SEXP algoSEXP, SEXP WinitSEXP, SEXP HinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Hinit(HinitSEXP);
    rcpp_result_gen = Rcpp::wrap(nmf(x, k, niter, algo, Winit, Hinit));
    return rcpp_result_gen;
END_RCPP
}
// symNMF
Rcpp::List symNMF(const SEXP& x, const arma::uword& k, const arma::uword& niter, const double& lambda, const std::string& algo, const Rcpp::Nullable<Rcpp::NumericMatrix>& Hinit);
RcppExport SEXP _RcppPlanc_symNMF(SEXP xSEXP, SEXP kSEXP, SEXP niterSEXP, SEXP lambdaSEXP, SEXP algoSEXP, SEXP HinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericMatrix>& >::type Hinit(HinitSEXP);
    rcpp_result_gen = Rcpp::wrap(symNMF(x, k, niter, lambda, algo, Hinit));
    return rcpp_result_gen;
END_RCPP
}
// bppnnls
arma::mat bppnnls(const arma::mat& C, const SEXP& B);
RcppExport SEXP _RcppPlanc_bppnnls(SEXP CSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type C(CSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(bppnnls(C, B));
    return rcpp_result_gen;
END_RCPP
}
// bppnnls_prod
arma::mat bppnnls_prod(const arma::mat& CtC, const arma::mat& CtB);
RcppExport SEXP _RcppPlanc_bppnnls_prod(SEXP CtCSEXP, SEXP CtBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type CtC(CtCSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type CtB(CtBSEXP);
    rcpp_result_gen = Rcpp::wrap(bppnnls_prod(CtC, CtB));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf
Rcpp::List bppinmf(Rcpp::List objectList, const arma::uword k, const double lambda, const arma::uword niter, const bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf(SEXP objectListSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf(objectList, k, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf_h5dense
Rcpp::List bppinmf_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPath, arma::uword k, double lambda, arma::uword niter, bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf_h5dense(SEXP filenamesSEXP, SEXP dataPathSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPath(dataPathSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf_h5dense(filenames, dataPath, k, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// bppinmf_h5sparse
Rcpp::List bppinmf_h5sparse(std::vector<std::string> filenames, std::vector<std::string> valuePath, std::vector<std::string> rowindPath, std::vector<std::string> colptrPath, arma::uvec nrow, arma::uvec ncol, arma::uword k, double lambda, arma::uword niter, bool verbose, Rcpp::Nullable<std::vector<arma::mat>> Hinit, Rcpp::Nullable<std::vector<arma::mat>> Vinit, Rcpp::Nullable<arma::mat> Winit);
RcppExport SEXP _RcppPlanc_bppinmf_h5sparse(SEXP filenamesSEXP, SEXP valuePathSEXP, SEXP rowindPathSEXP, SEXP colptrPathSEXP, SEXP nrowSEXP, SEXP ncolSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP, SEXP HinitSEXP, SEXP VinitSEXP, SEXP WinitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePath(valuePathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPath(rowindPathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPath(colptrPathSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Hinit(HinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::vector<arma::mat>> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::mat> >::type Winit(WinitSEXP);
    rcpp_result_gen = Rcpp::wrap(bppinmf_h5sparse(filenames, valuePath, rowindPath, colptrPath, nrow, ncol, k, lambda, niter, verbose, Hinit, Vinit, Winit));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S1
Rcpp::List onlineINMF_S1(Rcpp::List objectList, arma::uword k, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S1(SEXP objectListSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S1(objectList, k, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S1_h5dense
Rcpp::List onlineINMF_S1_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPaths, arma::uword k, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S1_h5dense(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S1_h5dense(filenames, dataPaths, k, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S1_h5sparse
Rcpp::List onlineINMF_S1_h5sparse(std::vector<std::string> filenames, std::vector<std::string> valuePaths, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, arma::uvec nrows, arma::uvec ncols, arma::uword k, double lambda, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S1_h5sparse(SEXP filenamesSEXP, SEXP valuePathsSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S1_h5sparse(filenames, valuePaths, rowindPaths, colptrPaths, nrows, ncols, k, lambda, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S23
Rcpp::List onlineINMF_S23(Rcpp::List objectList, const std::vector<arma::mat>& Vinit, const arma::mat& Winit, const std::vector<arma::mat>& Ainit, const std::vector<arma::mat>& Binit, const Rcpp::List& objectListNew, arma::uword k, double lambda, bool project, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S23(SEXP objectListSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP objectListNewSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP projectSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::mat>& >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type objectListNew(objectListNewSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type project(projectSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S23(objectList, Vinit, Winit, Ainit, Binit, objectListNew, k, lambda, project, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S23_h5dense
Rcpp::List onlineINMF_S23_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPaths, std::vector<std::string> filenamesNew, std::vector<std::string> dataPathsNew, std::vector<arma::mat> Vinit, const arma::mat& Winit, std::vector<arma::mat> Ainit, std::vector<arma::mat> Binit, arma::uword k, double lambda, bool project, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S23_h5dense(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP filenamesNewSEXP, SEXP dataPathsNewSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP projectSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPathsNew(dataPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type project(projectSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S23_h5dense(filenames, dataPaths, filenamesNew, dataPathsNew, Vinit, Winit, Ainit, Binit, k, lambda, project, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// onlineINMF_S23_h5sparse
Rcpp::List onlineINMF_S23_h5sparse(std::vector<std::string> filenames, std::vector<std::string> valuePaths, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, arma::uvec nrows, arma::uvec ncols, std::vector<std::string> filenamesNew, std::vector<std::string> valuePathsNew, std::vector<std::string> rowindPathsNew, std::vector<std::string> colptrPathsNew, arma::uvec nrowsNew, arma::uvec ncolsNew, std::vector<arma::mat> Vinit, const arma::mat& Winit, std::vector<arma::mat> Ainit, std::vector<arma::mat> Binit, arma::uword k, double lambda, bool project, arma::uword maxEpoch, arma::uword minibatchSize, arma::uword maxHALSIter, bool verbose);
RcppExport SEXP _RcppPlanc_onlineINMF_S23_h5sparse(SEXP filenamesSEXP, SEXP valuePathsSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP filenamesNewSEXP, SEXP valuePathsNewSEXP, SEXP rowindPathsNewSEXP, SEXP colptrPathsNewSEXP, SEXP nrowsNewSEXP, SEXP ncolsNewSEXP, SEXP VinitSEXP, SEXP WinitSEXP, SEXP AinitSEXP, SEXP BinitSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP projectSEXP, SEXP maxEpochSEXP, SEXP minibatchSizeSEXP, SEXP maxHALSIterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenamesNew(filenamesNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePathsNew(valuePathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPathsNew(rowindPathsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPathsNew(colptrPathsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrowsNew(nrowsNewSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncolsNew(ncolsNewSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Vinit(VinitSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Winit(WinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Ainit(AinitSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::mat> >::type Binit(BinitSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type project(projectSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxEpoch(maxEpochSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type minibatchSize(minibatchSizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type maxHALSIter(maxHALSIterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(onlineINMF_S23_h5sparse(filenames, valuePaths, rowindPaths, colptrPaths, nrows, ncols, filenamesNew, valuePathsNew, rowindPathsNew, colptrPathsNew, nrowsNew, ncolsNew, Vinit, Winit, Ainit, Binit, k, lambda, project, maxEpoch, minibatchSize, maxHALSIter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// uinmf_rcpp
Rcpp::List uinmf_rcpp(Rcpp::List objectList, const Rcpp::List& unsharedList, const std::vector<int>& whichUnshared, arma::uword k, const arma::vec& lambda, arma::uword niter, bool verbose);
RcppExport SEXP _RcppPlanc_uinmf_rcpp(SEXP objectListSEXP, SEXP unsharedListSEXP, SEXP whichUnsharedSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type objectList(objectListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type unsharedList(unsharedListSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type whichUnshared(whichUnsharedSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(uinmf_rcpp(objectList, unsharedList, whichUnshared, k, lambda, niter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// uinmf_h5dense
Rcpp::List uinmf_h5dense(std::vector<std::string> filenames, std::vector<std::string> dataPaths, std::vector<std::string> unsharedFilenames, std::vector<std::string> unsharedDataPaths, std::vector<int> whichUnshared, arma::uword k, const arma::vec& lambda, arma::uword niter, bool verbose);
RcppExport SEXP _RcppPlanc_uinmf_h5dense(SEXP filenamesSEXP, SEXP dataPathsSEXP, SEXP unsharedFilenamesSEXP, SEXP unsharedDataPathsSEXP, SEXP whichUnsharedSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dataPaths(dataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedFilenames(unsharedFilenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedDataPaths(unsharedDataPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type whichUnshared(whichUnsharedSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(uinmf_h5dense(filenames, dataPaths, unsharedFilenames, unsharedDataPaths, whichUnshared, k, lambda, niter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// uinmf_h5sparse
Rcpp::List uinmf_h5sparse(std::vector<std::string> filenames, std::vector<std::string> rowindPaths, std::vector<std::string> colptrPaths, std::vector<std::string> valuePaths, arma::uvec nrows, arma::uvec ncols, std::vector<std::string> unsharedFilenames, std::vector<std::string> unsharedRowindPaths, std::vector<std::string> unsharedColptrPaths, std::vector<std::string> unsharedValuePaths, arma::uvec unsharedNrows, arma::uvec unsharedNcols, std::vector<int> whichUnshared, arma::uword k, const arma::vec& lambda, arma::uword niter, bool verbose);
RcppExport SEXP _RcppPlanc_uinmf_h5sparse(SEXP filenamesSEXP, SEXP rowindPathsSEXP, SEXP colptrPathsSEXP, SEXP valuePathsSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP unsharedFilenamesSEXP, SEXP unsharedRowindPathsSEXP, SEXP unsharedColptrPathsSEXP, SEXP unsharedValuePathsSEXP, SEXP unsharedNrowsSEXP, SEXP unsharedNcolsSEXP, SEXP whichUnsharedSEXP, SEXP kSEXP, SEXP lambdaSEXP, SEXP niterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type rowindPaths(rowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type colptrPaths(colptrPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type valuePaths(valuePathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedFilenames(unsharedFilenamesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedRowindPaths(unsharedRowindPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedColptrPaths(unsharedColptrPathsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type unsharedValuePaths(unsharedValuePathsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type unsharedNrows(unsharedNrowsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type unsharedNcols(unsharedNcolsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type whichUnshared(whichUnsharedSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(uinmf_h5sparse(filenames, rowindPaths, colptrPaths, valuePaths, nrows, ncols, unsharedFilenames, unsharedRowindPaths, unsharedColptrPaths, unsharedValuePaths, unsharedNrows, unsharedNcols, whichUnshared, k, lambda, niter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// testcacheCalc
arma::uword testcacheCalc(int rank);
RcppExport SEXP _RcppPlanc_testcacheCalc(SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(testcacheCalc(rank));
    return rcpp_result_gen;
END_RCPP
}
// getBoundThreadCount
arma::uword getBoundThreadCount();
RcppExport SEXP _RcppPlanc_getBoundThreadCount() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getBoundThreadCount());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppPlanc_rcpp_mat_to_h5mat", (DL_FUNC) &_RcppPlanc_rcpp_mat_to_h5mat, 3},
    {"_RcppPlanc_rcpp_spmat_to_h5mat", (DL_FUNC) &_RcppPlanc_rcpp_spmat_to_h5mat, 7},
    {"_RcppPlanc_rcpp_spmat_to_h5spmat", (DL_FUNC) &_RcppPlanc_rcpp_spmat_to_h5spmat, 9},
    {"_RcppPlanc_nmf", (DL_FUNC) &_RcppPlanc_nmf, 6},
    {"_RcppPlanc_symNMF", (DL_FUNC) &_RcppPlanc_symNMF, 6},
    {"_RcppPlanc_bppnnls", (DL_FUNC) &_RcppPlanc_bppnnls, 2},
    {"_RcppPlanc_bppnnls_prod", (DL_FUNC) &_RcppPlanc_bppnnls_prod, 2},
    {"_RcppPlanc_bppinmf", (DL_FUNC) &_RcppPlanc_bppinmf, 8},
    {"_RcppPlanc_bppinmf_h5dense", (DL_FUNC) &_RcppPlanc_bppinmf_h5dense, 9},
    {"_RcppPlanc_bppinmf_h5sparse", (DL_FUNC) &_RcppPlanc_bppinmf_h5sparse, 13},
    {"_RcppPlanc_onlineINMF_S1", (DL_FUNC) &_RcppPlanc_onlineINMF_S1, 7},
    {"_RcppPlanc_onlineINMF_S1_h5dense", (DL_FUNC) &_RcppPlanc_onlineINMF_S1_h5dense, 8},
    {"_RcppPlanc_onlineINMF_S1_h5sparse", (DL_FUNC) &_RcppPlanc_onlineINMF_S1_h5sparse, 12},
    {"_RcppPlanc_onlineINMF_S23", (DL_FUNC) &_RcppPlanc_onlineINMF_S23, 13},
    {"_RcppPlanc_onlineINMF_S23_h5dense", (DL_FUNC) &_RcppPlanc_onlineINMF_S23_h5dense, 15},
    {"_RcppPlanc_onlineINMF_S23_h5sparse", (DL_FUNC) &_RcppPlanc_onlineINMF_S23_h5sparse, 23},
    {"_RcppPlanc_uinmf_rcpp", (DL_FUNC) &_RcppPlanc_uinmf_rcpp, 7},
    {"_RcppPlanc_uinmf_h5dense", (DL_FUNC) &_RcppPlanc_uinmf_h5dense, 9},
    {"_RcppPlanc_uinmf_h5sparse", (DL_FUNC) &_RcppPlanc_uinmf_h5sparse, 17},
    {"_RcppPlanc_testcacheCalc", (DL_FUNC) &_RcppPlanc_testcacheCalc, 1},
    {"_RcppPlanc_getBoundThreadCount", (DL_FUNC) &_RcppPlanc_getBoundThreadCount, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppPlanc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
